from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.common import *
from ibapi.contract import *
from ContractSamples import ContractSamples
import socket, time
import datetime
from datetime import datetime, timedelta
import pandas as pd
import collections
import os

TICKER_DIR = "D:\\UsedLists\\Global_Master_Tickers\\Master_Global_Ticker_List\\"
#TICKER_DIR = "C:\\Master_Global_Ticker_List\\"

orderId=1
reqId= 1
tickerId = 1



now = datetime.now()
queryTime = now.strftime("%Y%m%d %H:%M:%S")

df1 = pd.read_csv(f"D:\\UsedLists\\Global_Master_Tickers\\Master_Global_Ticker_List.csv", header=0)
#df1 = pd.read_csv("Mock_Global_Ticker_List.csv", header=0)[:3]

df2 = pd.DataFrame()

directory = ''
symbol = ''
y = 0
q = 0
i = 0
nextTickerId = 1
g = 0
print("df1:")
print(df1)





class TestApp(EClient, EWrapper):
    def __init__(self):
        print("TestApp.__init__")
        EClient.__init__(self, self)
        self.data = collections.defaultdict(list)
        self.y = 0


##This is where the code enters

    def nextValidId(self, orderId:int):
        print(f"nextValidId(orderId={orderId})")

        global nextTickerId
        global i  # i has to be declared as global if it's being modified
        global g
        global directory
        global symbol
        i = g
        symbol = df1.loc[i, 'IBKR Symbol']
        exchange = df1.loc[i, 'IBKR Exchange Symbol']
        currency = df1.loc[i, 'Currency']
        m = Contract()
        m.symbol = symbol
        m.secType = "STK"
        m.exchange = exchange
        m.currency = currency
        m.primaryExchange = exchange


        ## These if statements just make sure that I save the data into the right folders, this works fine too
        if i == 0:

            directory = df1.loc[i, 'Sector']
            parent_dir = TICKER_DIR
            path = os.path.join(parent_dir, directory)
            os.makedirs(path, exist_ok=True)
            os.chdir(path)

        elif df1.loc[i, 'Sector'] == df1.loc[(i - 1), 'Sector']:

            directory = df1.loc[i, 'Sector']
            parent_dir = TICKER_DIR
            path = os.path.join(parent_dir, directory)
            os.chdir(path)

        else:

            directory = df1.loc[i, 'Sector']
            parent_dir = TICKER_DIR
            path = os.path.join(parent_dir, directory)
            os.makedirs(path, exist_ok=True)
            os.chdir(path)

        filename = symbol
        path = os.path.join(path, filename)
        os.makedirs(path, exist_ok=True)
        os.chdir(path)

        i = i + 1
        x = 1

        self.y = 0
        while x <= 25: #This is just the number of times I need to send the request per ticker

            starttime = datetime.now() - timedelta(days=(x * 50))
            queryTime = starttime.strftime("%Y%m%d %H:%M:%S")

            ##This is the request for the market data, the "nextTickerId" just needs to be a random unique number each time, and the "querytime" is the end time for the data call, in this case, going back 50 days in 5 min intervals
            self.reqHistoricalData(nextTickerId, m, queryTime, "50 D", "5 mins", "TRADES", 1, 1, False, [])  ##50 day max works
            nextTickerId = nextTickerId + 1
            x = x + 1



    ################################################################

    # Mock code

    # from dataclasses import dataclass

    # @dataclass
    # class FakeBar:
    #     date: str
    #     open: str
    #     high: str
    #     low: str
    #     close: str
    #     volume: str

    # def reqHistoricalData(self, *args):
    #     print(f"reqHistoricalData{args}")
    #     # Mock callbacks
    #     self.historicalData(1, self.FakeBar(
    #         date=f"testdate_{i}",
    #         open=f"testopen_{i}",
    #         high=f"testhigh_{i}",
    #         low=f"testlow_{i}",
    #         close=f"testclose_{i}",
    #         volume=f"testvolume_{i}",
    #     ))
    #     self.historicalDataEnd(1, "", "")

    ################################################################






## This is where I save the data to a dictionary list, then to a dataframe
## This is the initial callback for the "reqHistoricalData" request

    def historicalData(self, reqId, bar):
        print(f"historicalData({reqId}, {bar})")

        self.data['date'].append(bar.date)
        self.data['open'].append(bar.open)
        self.data['high'].append(bar.high)
        self.data['low'].append(bar.low)
        self.data['close'].append(bar.close)
        self.data['volume'].append(bar.volume)




## The main issue is that it is just not saving the file to the CSV or incrementing "i" so that I can pull the next ticker from the CSV
## This gets called after every completed "historicalData" callback has been completed (So 25 times per ticker)
    
    def historicalDataEnd(self, reqId:int, start:str, end:str):
        print(f"historicalDataEnd({reqId}, {start}, {end})")
        print(self.y)
        global df2
        df2 = pd.DataFrame.from_dict(self.data)
        csv_path = TICKER_DIR + str(directory) + '\\' + str(symbol) + '\\' + str(symbol) + 'TickerInfo.txt'
        print("*" * 80)
        print(f"Saving CSV to {csv_path}")
        print(f"df2 contains {len(df2)} rows")
        print("*" * 80)
        df2.to_csv(csv_path, header=None, index=None, sep='\t')
        self.y = self.y + 1
        if self.y == 1 and i <= (len(df1) - 1):
            print("Moving onto next ticker")
            df2 = df2.iloc[0:0]
            self.data.clear()
            global nextTickerId
            nextTickerId = 1 + nextTickerId
            global g
            g = g + 1
            self.nextValidId(nextTickerId)









##These functions are not important, they are not an issue

    def error(self, reqId:TickerId, errorCode:int, errorString:str):
        print("Error: ", reqId, "", errorCode, "", errorString)


    def contractDetails(self, reqId:int, contractDetails:ContractDetails):
        print("contractDetail: ", reqId, " ", contractDetails)

    def contractDetailsEnd(self, reqId:int):
        print("end, disconnecting")
        self._socketShutdown()
        time.sleep(1)
        self.disconnect()


    def _socketShutdown(self):
        self.conn.lock.acquire()
        try:
            if self.conn.socket is not None:
                self.conn.socket.shutdown(socket.SHUT_WR)
        finally:
            self.conn.lock.release()










def main():


    app = TestApp()

    app.connect("127.0.0.1", 7497, 0)
    app.run() ##this is where the code jumps to the "nextValidId" function
    # Mock callbacks
    #app.nextValidId(3)
    print("Exiting main")

if __name__ == "__main__":
    main()
