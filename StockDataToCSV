from ibapi.client import EClient
from ibapi.wrapper import EWrapper
from ibapi.common import *
from ibapi.contract import *
from ContractSamples import ContractSamples
import socket, time
import datetime
from datetime import datetime, timedelta
import pandas as pd
import collections
import os

orderId=1
reqId= 1
tickerId = 1



now = datetime.now()
queryTime = now.strftime("%Y%m%d %H:%M:%S")


df1 = pd.read_csv("D:\\UsedLists\\Global_Master_Tickers\\Master_Global_Ticker_List.csv", header=0)

df2 = pd.DataFrame()

directory = ''
symbol = ''
y = 0
q = 0
i = 0
nextTickerId = 1
g = 0
print(df1)





class TestApp(EClient, EWrapper):
    def __init__(self):
        EClient.__init__(self, self)
        self.data = collections.defaultdict(list)
        self.y = 0



    def nextValidId(self, orderId:int):
        print("id", orderId)

        global nextTickerId
        global g
        i = g
        symbol = df1.loc[i, 'IBKR Symbol']
        exchange = df1.loc[i, 'IBKR Exchange Symbol']
        currency = df1.loc[i, 'Currency']

        m = Contract()
        m.symbol = symbol
        m.secType = "STK"
        m.exchange = exchange
        m.currency = currency
        m.primaryExchange = exchange

        if i == 0:
            
            directory = df1.loc[i, 'Sector']
            parent_dir = "D:\\UsedLists\\Global_Master_Tickers\\Master_Global_Ticker_List\\"
            path = os.path.join(parent_dir, directory)
            os.makedirs(path)
            os.chdir(path)

        elif df1.loc[i, 'Sector'] == df1.loc[(i - 1), 'Sector']:

            directory = df1.loc[i, 'Sector']
            parent_dir = "D:\\UsedLists\\Global_Master_Tickers\\Master_Global_Ticker_List\\"
            path = os.path.join(parent_dir, directory)
            os.chdir(path)

        else:

            directory = df1.loc[i, 'Sector']
            parent_dir = "D:\\UsedLists\\Global_Master_Tickers\\Master_Global_Ticker_List\\"
            path = os.path.join(parent_dir, directory)
            os.makedirs(path)
            os.chdir(path)

        filename = symbol
        path = os.path.join(path, filename)
        os.makedirs(path)
        os.chdir(path)

        i = i + 1
        x = 1

        self.y = 0
        while x <= 1:#25

            starttime = datetime.now() - timedelta(days=(x * 50))
            queryTime = starttime.strftime("%Y%m%d %H:%M:%S")

            self.reqHistoricalData(nextTickerId, m, queryTime, "50 D", "5 mins", "TRADES", 1, 1, False, [])  ##50 day max works
            nextTickerId = nextTickerId + 1
            x = x + 1












    def historicalData(self, reqId, bar):

        self.data['date'].append(bar.date)
        self.data['open'].append(bar.open)
        self.data['high'].append(bar.high)
        self.data['low'].append(bar.low)
        self.data['close'].append(bar.close)
        self.data['volume'].append(bar.volume)

        global df2
        df2 = pd.DataFrame.from_dict(self.data)

        print(df2)





    def historicalDataEnd(self, reqId:int, start:str, end:str):
        print(self.y)
        self.y = self.y + 1
        if self.y == 1 and i <= (len(df1) - 1):
            global df2
            df2.to_csv(r'D:\\UsedLists\\US_Master_Tickers\\Master_US_Ticker_List\\' + str(directory) + '\\' + str(symbol) + '\\' + str(symbol) + 'TickerInfo.txt', header=None, index=None, sep='\t')
            df2 = df2.iloc[0:0]
            self.data.clear()
            global nextTickerId
            nextTickerId = 1 + nextTickerId
            global g
            g = g + 1
            self.nextValidId(nextTickerId)





    def error(self, reqId:TickerId, errorCode:int, errorString:str):
        print("Error: ", reqId, "", errorCode, "", errorString)



    def contractDetails(self, reqId:int, contractDetails:ContractDetails):
        print("contractDetail: ", reqId, " ", contractDetails)

    def contractDetailsEnd(self, reqId:int):
        print("end, disconnecting")
        self._socketShutdown()
        time.sleep(1)
        self.disconnect()


        ## added the socket shut down which mattered
        ##added the time.sleep after adding the self._socketShutdown() above
    def _socketShutdown(self):
        self.conn.lock.acquire()
        try:
            if self.conn.socket is not None:
                self.conn.socket.shutdown(socket.SHUT_WR)
        finally:
            self.conn.lock.release()










def main():


    app = TestApp()

    app.connect("127.0.0.1", 7497, 0)
    app.run()

if __name__ == "__main__":
    main()
